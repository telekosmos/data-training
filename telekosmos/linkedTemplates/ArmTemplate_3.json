{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "telekosmos"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dfFillDimCountry')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dim table Incremental load",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableAddress",
								"type": "DatasetReference"
							},
							"name": "sourceAddress"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sourceDimCountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "leftJoinOnCountry"
						},
						{
							"name": "filterCountryNULL"
						},
						{
							"name": "aggCountry"
						},
						{
							"name": "selectJustCountry"
						}
					],
					"scriptLines": [
						"parameters{",
						"     schema as string",
						"}",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceAddress",
						"source(output(",
						"          id as integer,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimCountry",
						"sourceAddress, sourceDimCountry join(CountryRegion == country,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> leftJoinOnCountry",
						"leftJoinOnCountry filter(isNull(country)) ~> filterCountryNULL",
						"filterCountryNULL aggregate(groupBy(CountryRegion),",
						"     counter = count()) ~> aggCountry",
						"aggCountry select(mapColumn(",
						"          CountryRegion",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJustCountry",
						"selectJustCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          country = CountryRegion",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfFillDimState')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dim table Incremental load",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableAddress",
								"type": "DatasetReference"
							},
							"name": "sourceAddress"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sourceDimState"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "leftJoinOnState"
						},
						{
							"name": "filterStateNULL"
						},
						{
							"name": "aggState"
						},
						{
							"name": "selectJustState"
						}
					],
					"scriptLines": [
						"parameters{",
						"     schema as string",
						"}",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceAddress",
						"source(output(",
						"          id as integer,",
						"          state as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimState",
						"sourceAddress, sourceDimState join(StateProvince == state,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> leftJoinOnState",
						"leftJoinOnState filter(isNull(state)) ~> filterStateNULL",
						"filterStateNULL aggregate(groupBy(StateProvince),",
						"     counter = count()) ~> aggState",
						"aggState select(mapColumn(",
						"          StateProvince",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJustState",
						"selectJustState sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          state = StateProvince",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfJsonArray2Parquet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pick a nested array and each element in the outer array (which is another one) gets converted to a row... manually.\n\nParams:\njsonFilename\t\n'Events*.json'\n\nparquetTargetFolder\t\n'StagingEvents'\n\nDataset parameters\nsource1\n\nfolder\t\nOriginalFiles/Events\n\nfilePattern\t\nEvents20211101.json\n\nsinkParquet\ncontainer\t\nsources\n\nfolder\t\nStagingEvents\n\nfilename\t\ncrap.parquet\n",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "JsonFiles",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetGeneric",
								"type": "DatasetReference"
							},
							"name": "sinkParquet"
						}
					],
					"transformations": [
						{
							"name": "flattenNestedArray"
						},
						{
							"name": "derivedTableColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     jsonFilename as string,",
						"     parquetTargetFolder as string",
						"}",
						"source(output(",
						"          kind as string,",
						"          id as string,",
						"          query as ({start-date} as string, {end-date} as string, ids as string, dimensions as string, metrics as string[], {start-index} as integer, {max-results} as integer),",
						"          itemsPerPage as integer,",
						"          totalResults as integer,",
						"          selfLink as string,",
						"          profileInfo as (profileId as string, accountId as string, webPropertyId as string, internalWebPropertyId as string, profileName as string, tableId as string),",
						"          containsSampledData as boolean,",
						"          columnHeaders as (name as string, columnType as string, dataType as string)[],",
						"          totalsForAllResults as ({ga:users} as string, {ga:newUsers} as string, {ga:sessions} as string, {ga:pageviews} as string, {ga:sessionDuration} as string, {ga:bounceRate} as string, {ga:transactions} as string, {ga:transactionRevenue} as string),",
						"          rows as string[][],",
						"          ADFWebActivityResponseHeaders as (Vary as string, {X-XSS-Protection} as string, {X-Frame-Options} as string, {X-Content-Type-Options} as string, {Alt-Svc} as string, {Transfer-Encoding} as string, {Accept-Ranges} as string, {Cache-Control} as string, Date as string, Server as string, {Content-Type} as string),",
						"          effectiveIntegrationRuntime as string,",
						"          executionDuration as integer,",
						"          durationInQueue as (integrationRuntimeQueue as integer),",
						"          billingReference as (activityType as string, billableDuration as (meterType as string, duration as double, unit as string)[])",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 foldDown(unroll(rows),",
						"     mapColumn(",
						"          id,",
						"          rows",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenNestedArray",
						"flattenNestedArray derive(col1_date = rows[1],",
						"          col2_device_category = rows[2],",
						"          col3_channel_grouping = rows[3],",
						"          col4_event_category = rows[4],",
						"          col5_event_action = rows[5],",
						"          col6_users = rows[6],",
						"          col7_newusers = rows[7],",
						"          col8_sessions = rows[8],",
						"          col9_pageviews = rows[9],",
						"          col10_session_duration = rows[10],",
						"          col11_bounce_rate = rows[11],",
						"          col12_transactions = rows[12],",
						"          col13_transaction_revenue = rows[13]) ~> derivedTableColumns",
						"derivedTableColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          date = col1_date,",
						"          device_category = col2_device_category,",
						"          channel_grouping = col3_channel_grouping,",
						"          event_category = col4_event_category,",
						"          event_action = col5_event_action,",
						"          users = col6_users,",
						"          newusers = col7_newusers,",
						"          sessions = col8_sessions,",
						"          pageviews = col9_pageviews,",
						"          session_duration = col10_session_duration,",
						"          bounce_rate = col11_bounce_rate,",
						"          transactions = col12_transactions,",
						"          transaction_revenue = col13_transaction_revenue",
						"     )) ~> sinkParquet"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfJsonArray2Table')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pick a nested array and each element in the outer array (which is another one) gets converted to a row... manually",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "JsonFiles",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sinkTable"
						}
					],
					"transformations": [
						{
							"name": "flattenNestedArray"
						},
						{
							"name": "derivedTableColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ADFWebActivityResponseHeaders as ({Accept-Ranges} as string, {Alt-Svc} as string, {Cache-Control} as string, {Content-Type} as string, Date as string, Server as string, {Transfer-Encoding} as string, Vary as string, {X-Content-Type-Options} as string, {X-Frame-Options} as string, {X-XSS-Protection} as boolean),",
						"          billingReference as (activityType as string, billableDuration as (duration as double, meterType as string, unit as string)[]),",
						"          columnHeaders as (columnType as string, dataType as string, name as string)[],",
						"          containsSampledData as boolean,",
						"          durationInQueue as (integrationRuntimeQueue as boolean),",
						"          effectiveIntegrationRuntime as string,",
						"          executionDuration as boolean,",
						"          id as string,",
						"          itemsPerPage as short,",
						"          kind as string,",
						"          profileInfo as (accountId as integer, internalWebPropertyId as integer, profileId as integer, profileName as string, tableId as string, webPropertyId as string),",
						"          query as (dimensions as string, {end-date} as date, ids as string, {max-results} as short, metrics as string[], {start-date} as date, {start-index} as boolean),",
						"          rows as string[][],",
						"          selfLink as string,",
						"          totalResults as short,",
						"          totalsForAllResults as ({ga:bounceRate} as double, {ga:newUsers} as short, {ga:pageviews} as integer, {ga:sessionDuration} as double, {ga:sessions} as short, {ga:transactionRevenue} as double, {ga:transactions} as short, {ga:users} as short)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> source1",
						"source1 foldDown(unroll(rows),",
						"     mapColumn(",
						"          id,",
						"          rows",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenNestedArray",
						"flattenNestedArray derive(col1_date = rows[1],",
						"          col2_device_category = rows[2],",
						"          col3_channel_grouping = rows[3],",
						"          col4_event_category = rows[4],",
						"          col5_event_action = rows[5],",
						"          col6_users = rows[6],",
						"          col7_newusers = rows[7],",
						"          col8_sessions = rows[8],",
						"          col9_pageviews = rows[9],",
						"          col10_session_duration = rows[10],",
						"          col11_bounce_rate = rows[11],",
						"          col12_transactions = rows[12],",
						"          col13_transaction_revenue = rows[13]) ~> derivedTableColumns",
						"derivedTableColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          date = col1_date,",
						"          device_category = col2_device_category,",
						"          channel_grouping = col3_channel_grouping,",
						"          event_category = col4_event_category,",
						"          event_action = col5_event_action,",
						"          users = col6_users,",
						"          newusers = col7_newusers,",
						"          sessions = col8_sessions,",
						"          pageviews = col9_pageviews,",
						"          session_duration = col10_session_duration,",
						"          bounce_rate = col11_bounce_rate,",
						"          transactions = col12_transactions,",
						"          transaction_revenue = col13_transaction_revenue",
						"     )) ~> sinkTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfParquetJsonString_Try')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Try to come up with something to convert a nested json array as string into a database rows (one for each inner array)",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "GenericCsv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "flatten1"
						},
						{
							"name": "flatten2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          batch_id as integer,",
						"          the_date as timestamp,",
						"          rows_array as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 derive(rows_array_of_string = split(replace(substring(rows_array, 2, length(rows_array)-1), '],[', ']|['), '|')) ~> derivedColumn1",
						"derivedColumn1 derive(nested_array = array(map(rows_array_of_string, split(replace(substring(#item, 3, length(#item)-4), '\",\"', '|'), '|')))) ~> derivedColumn2",
						"derivedColumn2 foldDown(unroll(nested_array),",
						"     mapColumn(",
						"          batch_id,",
						"          nested_array",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 foldDown(unroll(nested_array),",
						"     mapColumn(",
						"          batch_id,",
						"          nested_array_again = nested_array",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten2",
						"flatten2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfSimpleStateFromAddress')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Getting distinct state(s) based on query",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sourceAddressState"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          StateProvince as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select distinct StateProvince\\nfrom [SalesLT].[Address]',",
						"     format: 'query') ~> sourceAddressState",
						"sourceAddressState sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          state = StateProvince",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfTransformMultiple')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "JsonSourcesContainer",
								"type": "DatasetReference"
							},
							"name": "JsonFiles"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetFolder",
								"type": "DatasetReference"
							},
							"name": "ParquetSink"
						}
					],
					"transformations": [
						{
							"name": "FlattenRowsField"
						},
						{
							"name": "CreateProperColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ADFWebActivityResponseHeaders as ({Accept-Ranges} as string, {Alt-Svc} as string, {Cache-Control} as string, {Content-Type} as string, Date as string, Server as string, {Transfer-Encoding} as string, Vary as string, {X-Content-Type-Options} as string, {X-Frame-Options} as string, {X-XSS-Protection} as boolean),",
						"          billingReference as (activityType as string, billableDuration as (duration as double, meterType as string, unit as string)[]),",
						"          columnHeaders as (columnType as string, dataType as string, name as string)[],",
						"          containsSampledData as boolean,",
						"          durationInQueue as (integrationRuntimeQueue as boolean),",
						"          effectiveIntegrationRuntime as string,",
						"          executionDuration as boolean,",
						"          id as string,",
						"          itemsPerPage as short,",
						"          kind as string,",
						"          profileInfo as (accountId as integer, internalWebPropertyId as integer, profileId as integer, profileName as string, tableId as string, webPropertyId as string),",
						"          query as (dimensions as string, {end-date} as date, ids as string, {max-results} as short, metrics as string[], {start-date} as date, {start-index} as boolean),",
						"          rows as string[][],",
						"          selfLink as string,",
						"          totalResults as short,",
						"          totalsForAllResults as ({ga:bounceRate} as double, {ga:newUsers} as short, {ga:pageviews} as integer, {ga:sessionDuration} as double, {ga:sessions} as short, {ga:transactionRevenue} as double, {ga:transactions} as short, {ga:users} as short)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'source_filename',",
						"     documentForm: 'arrayOfDocuments',",
						"     wildcardPaths:['OriginalFiles/Events/Events*.json']) ~> JsonFiles",
						"JsonFiles foldDown(unroll(rows),",
						"     mapColumn(",
						"          id,",
						"          rows,",
						"          source_filename",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenRowsField",
						"FlattenRowsField derive(col1_date = rows[1],",
						"          col2_device_category = rows[2],",
						"          col3_channel_grouping = rows[3],",
						"          col4_event_category = rows[4],",
						"          col5_event_action = rows[5],",
						"          col6_users = rows[6],",
						"          col7_newusers = rows[7],",
						"          col8_sessions = rows[8],",
						"          col9_pageviews = rows[9],",
						"          target_folder = concat('StagingEvents/', split(split(source_filename, '/')[4], '.')[1])) ~> CreateProperColumns",
						"CreateProperColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     rowFolderUrlColumn:'target_folder',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          col1_date,",
						"          col2_device_category,",
						"          col3_channel_grouping,",
						"          col4_event_category,",
						"          col5_event_action,",
						"          col6_users,",
						"          col7_newusers,",
						"          col8_sessions,",
						"          col9_pageviews,",
						"          target_folder",
						"     )) ~> ParquetSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/factAddressesProcess')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "AddressTable"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "DimCountry"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "DimState"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "DimCity"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "SourceFactAddresses"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sink2Table"
						}
					],
					"transformations": [
						{
							"name": "id2idcountry"
						},
						{
							"name": "joinCountryIds"
						},
						{
							"name": "id2idstate"
						},
						{
							"name": "joinStateIds"
						},
						{
							"name": "derivedColumnModifiedDate"
						},
						{
							"name": "id2idcity"
						},
						{
							"name": "joinCityIds"
						},
						{
							"name": "removeColumns"
						},
						{
							"name": "joinFactTable"
						},
						{
							"name": "filterJoinNULL"
						},
						{
							"name": "selectNewRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> AddressTable",
						"source(output(",
						"          id as integer,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCountry",
						"source(output(",
						"          id as integer,",
						"          state as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimState",
						"source(output(",
						"          id as integer,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCity",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          id_city as integer,",
						"          id_state as integer,",
						"          id_country as integer,",
						"          PostalCode as string,",
						"          ModifiedDateId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceFactAddresses",
						"DimCountry select(mapColumn(",
						"          id_country = id,",
						"          country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> id2idcountry",
						"selectNewRows, id2idcountry join(CountryRegion == country,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> joinCountryIds",
						"DimState select(mapColumn(",
						"          id_state = id,",
						"          state",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> id2idstate",
						"joinCountryIds, id2idstate join(StateProvince == state,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> joinStateIds",
						"joinCityIds derive(ModifiedDateId = toInteger(",
						"    concat(",
						"        toString(year(ModifiedDate)), ",
						"        toString(month(ModifiedDate), '00'), ",
						"        toString(dayOfMonth(ModifiedDate), '00')",
						"    )",
						"),",
						"          AddressLine2 = iifNull(AddressLine2, 'N/A')) ~> derivedColumnModifiedDate",
						"DimCity select(mapColumn(",
						"          id_city = id,",
						"          city",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> id2idcity",
						"joinStateIds, id2idcity join(selectNewRows@City == id2idcity@city,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> joinCityIds",
						"derivedColumnModifiedDate select(mapColumn(",
						"          AddressID,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          PostalCode,",
						"          ModifiedDateId,",
						"          id_country,",
						"          id_state,",
						"          id_city",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> removeColumns",
						"AddressTable, SourceFactAddresses join(AddressTable@AddressID == SourceFactAddresses@AddressID,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> joinFactTable",
						"joinFactTable filter(isNull(SourceFactAddresses@AddressID)) ~> filterJoinNULL",
						"filterJoinNULL select(mapColumn(",
						"          AddressID = AddressTable@AddressID,",
						"          AddressLine1 = AddressTable@AddressLine1,",
						"          AddressLine2 = AddressTable@AddressLine2,",
						"          City,",
						"          StateProvince,",
						"          CountryRegion,",
						"          PostalCode = AddressTable@PostalCode,",
						"          rowguid,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectNewRows",
						"removeColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink2Table"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/query2dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "salesOrderDetail"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "salesOrderHeader"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinSalesOrders"
						},
						{
							"name": "joinCustomers"
						},
						{
							"name": "derivedTransformedCols"
						},
						{
							"name": "sort1"
						},
						{
							"name": "selectFinalColumns"
						},
						{
							"name": "splitOnDate"
						},
						{
							"name": "split1"
						},
						{
							"name": "filterEmailNotLike"
						},
						{
							"name": "columnRequestOld"
						},
						{
							"name": "columnRequestCurrent"
						},
						{
							"name": "columnRequestNew"
						},
						{
							"name": "unionRequests"
						}
					],
					"scriptLines": [
						"parameters{",
						"     sinkTableSchema as string,",
						"     sinkTableName as string",
						"}",
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as short,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> salesOrderDetail",
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> salesOrderHeader",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> customer",
						"salesOrderDetail, salesOrderHeader join(salesOrderDetail@SalesOrderID == salesOrderHeader@SalesOrderID,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> joinSalesOrders",
						"joinSalesOrders, customer join(salesOrderHeader@CustomerID == customer@CustomerID,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> joinCustomers",
						"sort1 derive(PurchaseType = concat(left(SalesOrderNumber, 2), left(PurchaseOrderNumber, 2)),",
						"          TotalCost = OrderQty*UnitPrice,",
						"          Customer = Title + FirstName + LastName,",
						"          FirstPart = left(AccountNumber, instr(AccountNumber, '-')-1),",
						"          SecondPart = split(AccountNumber, '-')[2],",
						"          ThirdPart = split(AccountNumber, '-')[3],",
						"          PhoneLocal = case(rlike(Phone, `(.*)\\)(.*)`), 'NOT LOCAL', 'LOCAL'),",
						"          DateAttribute = case(:customerModifiedDate_yyyyMMdd <= '20051201', 'BeforeStart', ",
						"    between(:customerModifiedDate_yyyyMMdd, '20051202', '20061201'), 'JustStarted',",
						"    between(:customerModifiedDate_yyyyMMdd, '20061202', '20070601'), 'OnGoingBusiness',",
						"    between(:customerModifiedDate_yyyyMMdd, '20070602', '20080601'), 'EndOfBusiness', 'ErrorDate'",
						"),",
						"          DateId = toString(salesOrderDetail@ModifiedDate, 'yyyyMMdd'),",
						"          TimeId = toString(customer@ModifiedDate, 'HHmm'),",
						"          customerModifiedDate_yyyyMMdd := toString(customer@ModifiedDate, 'yyyyMMdd')) ~> derivedTransformedCols",
						"filterEmailNotLike sort(asc(SalesOrderDetailID, true)) ~> sort1",
						"derivedTransformedCols select(mapColumn(",
						"          SalesOrderID = salesOrderHeader@SalesOrderID,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          PurchaseType,",
						"          ShipMethod,",
						"          OrderQty,",
						"          UnitPrice,",
						"          TotalCost,",
						"          Customer,",
						"          AccountNumber,",
						"          FirstPart,",
						"          SecondPart,",
						"          ThirdPart,",
						"          PhoneLocal,",
						"          DateAttribute,",
						"          DateId,",
						"          TimeId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinalColumns",
						"selectFinalColumns split(SalesOrderID <= 71816,",
						"     disjoint: false) ~> splitOnDate@(Old, Others)",
						"splitOnDate@Others split(between(SalesOrderID, 71831, 71897),",
						"     SalesOrderID > 71897,",
						"     disjoint: false) ~> split1@(Current, New)",
						"joinCustomers filter(!rlike(EmailAddress, `(.*)inda(.*)`)) ~> filterEmailNotLike",
						"splitOnDate@Old derive(Request = 'Old') ~> columnRequestOld",
						"split1@Current derive(Request = 'Current') ~> columnRequestCurrent",
						"split1@New derive(Request = 'New') ~> columnRequestNew",
						"columnRequestOld, columnRequestCurrent, columnRequestNew union(byName: true)~> unionRequests",
						"unionRequests sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex 15 - Load dim tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Container pipeline to use load dim tables dataflows",
				"activities": [
					{
						"name": "Load countries",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfFillDimCountry",
								"type": "DataFlowReference",
								"parameters": {
									"schema": {
										"value": "@pipeline().parameters.targetSchema",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceAddress": {},
									"sourceDimCountry": {
										"Schema": {
											"value": "@pipeline().parameters.targetSchema",
											"type": "Expression"
										},
										"Table": "DimCountry"
									},
									"sink1": {
										"Schema": {
											"value": "@pipeline().parameters.targetSchema",
											"type": "Expression"
										},
										"Table": "DimCountry"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load states",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfFillDimState",
								"type": "DataFlowReference",
								"parameters": {
									"schema": {
										"value": "'@{pipeline().parameters.targetSchema}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceAddress": {},
									"sourceDimState": {
										"Schema": {
											"value": "@pipeline().parameters.targetSchema",
											"type": "Expression"
										},
										"Table": "DimState"
									},
									"sink1": {
										"Schema": {
											"value": "@pipeline().parameters.targetSchema",
											"type": "Expression"
										},
										"Table": "DimState"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load cities",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfFillDimCity",
								"type": "DataFlowReference",
								"parameters": {
									"schema": {
										"value": "'@{pipeline().parameters.targetSchema}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceAddress": {},
									"sourceDimCity": {
										"Schema": {
											"value": "@pipeline().parameters.targetSchema",
											"type": "Expression"
										},
										"Table": "DimCity"
									},
									"sink1": {
										"Schema": "@pipeline().parameters.targetSchema",
										"Table": "DimCity"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"targetSchema": {
						"type": "string",
						"defaultValue": "TTraining"
					}
				},
				"folder": {
					"name": "data flow pipes"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-26T13:45:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfFillDimCountry')]",
				"[concat(variables('factoryId'), '/dataflows/dfFillDimState')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex 16 - Process Fact Address')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process FactAdress",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "factAddressesProcess",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AddressTable": {
										"Schema": "SalesLT",
										"Table": "Address"
									},
									"DimCountry": {
										"Schema": "TTraining",
										"Table": "DimCountry"
									},
									"DimState": {
										"Schema": "TTraining",
										"Table": "DimState"
									},
									"DimCity": {
										"Schema": "TTraining",
										"Table": "DimCity"
									},
									"SourceFactAddresses": {
										"Schema": "TTraining",
										"Table": "FactAddresses"
									},
									"sink2Table": {
										"Schema": "TTraining",
										"Table": "FactAddresses"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "data flow pipes"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-27T10:57:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/factAddressesProcess')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex 17 - Query to Dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Query is:\nSELECT\nb.[SalesOrderID]\n,b.SalesOrderNumber\n,b.PurchaseOrderNumber ,Concat(Left(b.SalesOrderNumber,2),Left(b.PurchaseOrderNumber,2)) as PurchaseType ,b.ShipMethod\n,a.OrderQty\n,a.UnitPrice\n,a.OrderQty*a.UnitPrice as [TotalCost]\n,c.Title + ' ' + FirstName + ' ' + LastName as Customer\n,b.AccountNumber\n,SUBSTRING(AccountNumber,0,CHARINDEX('-',AccountNumber,0))as FirstPart ,SUBSTRING(AccountNumber,CHARINDEX('-',AccountNumber,0)+1,CHARINDEX('-',AccountNumber,CHARINDEX('- ',AccountNumber,0)+1)-(CHARINDEX('-',AccountNumber,0)+1)) as SecondPart ,RIGHT(AccountNumber,LEN(AccountNumber)-CHARINDEX('-',AccountNumber,CHARINDEX('- ',AccountNumber,0)+1)) as ThirdPart\n,CASE WHEN Phone like '%)%' THEN 'NOT LOCAL' ELSE 'LOCAL' END as PhoneLocal\n,CASE WHEN c.ModifiedDate<='20051201' THEN 'BeforeStart'\nWHEN c.ModifiedDate BETWEEN '20051202' AND '20061201'THEN 'JustStarted' WHEN c.ModifiedDate BETWEEN '20061202' AND '20070601'THEN 'OnGoingBusiness' WHEN c.ModifiedDate BETWEEN '20070602' AND '20080601'THEN 'EndOfBusiness' ELSE 'ErrorDate' END as DateAttribute\n,FORMAT(a.ModifiedDate,'yyyyMMdd') as DateId ,FORMAT(c.ModifiedDate,'HHmm') as TimeId FROM [SalesLT].[SalesOrderDetail] as a\nINNER JOIN [SalesLT].[SalesOrderHeader] as b ON a.[SalesOrderID]=b.[SalesOrderID]\nLEFT JOIN [SalesLT].[Customer] as c\nON c.CustomerID=b.CustomerID\nWHERE c.EmailAddress not like '%inda%'\n",
				"activities": [
					{
						"name": "Dataflow from query",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "query2dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"sinkTableSchema": {
										"value": "'@{pipeline().parameters.sinkSchema}'",
										"type": "Expression"
									},
									"sinkTableName": {
										"value": "'@{pipeline().parameters.sinkTable}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"salesOrderDetail": {
										"Schema": "SalesLT",
										"Table": "SalesOrderDetail"
									},
									"salesOrderHeader": {
										"Schema": "SalesLT",
										"Table": "SalesOrderHeader"
									},
									"customer": {
										"Schema": "SalesLT",
										"Table": "Customer"
									},
									"sink1": {
										"Schema": {
											"value": "@pipeline().parameters.sinkSchema",
											"type": "Expression"
										},
										"Table": {
											"value": "@pipeline().parameters.sinkTable",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sinkSchema": {
						"type": "string",
						"defaultValue": "TTraining"
					},
					"sinkTable": {
						"type": "string",
						"defaultValue": "Sales"
					}
				},
				"folder": {
					"name": "data flow pipes"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-27T10:38:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/query2dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex 18 - Json to Parquet to DB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Json Files Events",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "JsonFiles",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.eventsSourceFolder",
										"type": "Expression"
									},
									"filePattern": "*.json"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "ForEach Json File Event",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Json Files Events",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Json Files Events').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Transform json arrays to valid parquet",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "dfJsonArray2Parquet",
											"type": "DataFlowReference",
											"parameters": {
												"jsonFilename": {
													"value": "'@{item().name}'",
													"type": "Expression"
												},
												"parquetTargetFolder": {
													"value": "'@{pipeline().parameters.eventsStagingFolder}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {
													"folder": {
														"value": "@pipeline().parameters.eventsSourceFolder",
														"type": "Expression"
													},
													"filePattern": {
														"value": "@item().name",
														"type": "Expression"
													}
												},
												"sinkParquet": {
													"container": "sources",
													"folder": {
														"value": "@pipeline().parameters.eventsStagingFolder",
														"type": "Expression"
													},
													"filename": "*"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to DB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach Json File Event",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ParquetDirectory",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.eventsStagingFolder",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.sinkTableSchema",
										"type": "Expression"
									},
									"Table": {
										"value": "@pipeline().parameters.sinkTableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete Staging",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy data to DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ParquetDirectory",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.eventsStagingFolder",
										"type": "Expression"
									}
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage1",
									"type": "LinkedServiceReference"
								}
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "ForEach json do backup",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Copy data to DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Json Files Events').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Backup Json Files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "JsonFiles",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@pipeline().parameters.eventsSourceFolder",
													"type": "Expression"
												},
												"filePattern": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "JsonFiles",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@concat(pipeline().parameters.eventsSourceFolder, '/JsonEventsProcessed')",
													"type": "Expression"
												},
												"filePattern": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"eventsSourceFolder": {
						"type": "string"
					},
					"eventsStagingFolder": {
						"type": "string"
					},
					"sinkTableSchema": {
						"type": "string"
					},
					"sinkTableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "data flow pipes"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-02T11:36:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfJsonArray2Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex 18 Enhanced')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfJsonEventsTransform",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfTransformMultiple",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"JsonFiles": {},
									"ParquetSink": {
										"container": "sources",
										"folder": "Tmp"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Preprocessed parquet to db",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "dfJsonEventsTransform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "Tmp/Events*",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "col1_date",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "date",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "col2_device_category",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "device_category",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "col3_channel_grouping",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "channel_grouping",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "col4_event_category",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "event_category",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "col5_event_action",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "event_action",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "col6_users",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "users",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "col7_newusers",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "newusers",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "col8_sessions",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "sessions",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "col9_pageviews",
											"type": "String",
											"physicalType": "UTF8"
										},
										"sink": {
											"name": "pageviews",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ParquetDirectory",
								"type": "DatasetReference",
								"parameters": {
									"container": "sources"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "TTraining",
									"Table": "Events"
								}
							}
						]
					},
					{
						"name": "Json source to processed",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Preprocessed parquet to db",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "OriginalFiles/Events",
									"wildcardFileName": "Events*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "JsonSourcesContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "JsonFolder",
								"type": "DatasetReference",
								"parameters": {
									"folder": "OriginalFiles/Events/Processed"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "data flow pipes"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfTransformMultiple')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex 18 aux - Json 2 Parquet then Table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF Json rows to Parquet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfJsonArray2Parquet",
								"type": "DataFlowReference",
								"parameters": {
									"jsonFilename": {
										"value": "'@{concat(pipeline().parameters.sourceFolder, '/', pipeline().parameters.sourceJsonFile)}'",
										"type": "Expression"
									},
									"parquetTargetFolder": {
										"value": "'@{pipeline().parameters.stagingFolder}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {
										"folder": {
											"value": "@pipeline().parameters.sourceFolder",
											"type": "Expression"
										},
										"filePattern": "*.json"
									},
									"sinkParquet": {
										"container": "sources",
										"folder": {
											"value": "@pipeline().parameters.stagingFolder",
											"type": "Expression"
										},
										"filename": "*"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceFolder": {
						"type": "string",
						"defaultValue": "OriginalFiles/Events"
					},
					"stagingFolder": {
						"type": "string",
						"defaultValue": "StagingEvents"
					},
					"sourceJsonFile": {
						"type": "string"
					},
					"sinkTablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "data flow pipes"
				},
				"annotations": [],
				"lastPublishTime": "2022-06-02T11:36:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfJsonArray2Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex13 Calling pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Move Traffic parquet files",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move parquet files by entity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Move Product parquet files",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move parquet files by entity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"entity": "Product"
							}
						}
					},
					{
						"name": "Execute Move Event parquet files",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Move parquet files by entity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"entity": "Events"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"entities": {
						"type": "string",
						"defaultValue": "Events,Product,Traffic"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-25T15:18:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex13 Iterating over entities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Call pipeline to move parquet files by entities by iterating over parameter",
				"activities": [
					{
						"name": "LoopOverEntities",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@split(pipeline().parameters.entities, ',')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Move parquet files",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Move parquet files by entity",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"entity": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"entities": {
						"type": "string",
						"defaultValue": "Events,Product,Traffic"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-23T07:37:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex15 - DimTables - Bad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dimensional tables",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfDimTables",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceSalesAddres": {},
									"sinkDimState": {
										"Schema": "TTraining",
										"Table": "DimState"
									},
									"sinkDimCity": {
										"Schema": "TTraining",
										"Table": "DimCity"
									},
									"sinkDimCountry": {
										"Schema": "TTraining",
										"Table": "DimCountry"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "data flow pipes"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-26T13:45:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Temp pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfParquetJsonString_Try",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"Schema": "TTraining",
										"Table": "TrafficTmp"
									},
									"sink1": {
										"container": "sources",
										"prefix": "Temp",
										"filename": "traffic-unrolled.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-02T08:59:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfParquetJsonString_Try')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/xlsx2csv-parquet-json-db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "one to rule them all",
				"activities": [
					{
						"name": "xlsx2csv_pipe1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyPipeline_xlsx2csv",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceContainer": {
									"value": "@pipeline().parameters.SourceContainer",
									"type": "Expression"
								},
								"TargetContainer": {
									"value": "@pipeline().parameters.TargetContainer",
									"type": "Expression"
								},
								"SourcePrefix": {
									"value": "@pipeline().parameters.SourcePrefix",
									"type": "Expression"
								},
								"TargetPrefix": {
									"value": "@pipeline().parameters.CsvPrefix",
									"type": "Expression"
								},
								"SourceFilename": {
									"value": "@pipeline().parameters.SourceFilename",
									"type": "Expression"
								},
								"TargetFilename": {
									"value": "@concat(pipeline().parameters.TargetFilename, '.', pipeline().parameters.CsvPrefix)",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "xlsx2json_pipe2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "xlsx2csv_pipe1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyPipeline_xlsx2json",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceContainer": {
									"value": "@pipeline().parameters.SourceContainer",
									"type": "Expression"
								},
								"SourcePrefix": {
									"value": "@pipeline().parameters.SourcePrefix",
									"type": "Expression"
								},
								"SourceFilename": {
									"value": "@pipeline().parameters.SourceFilename",
									"type": "Expression"
								},
								"TargetContainer": {
									"value": "@pipeline().parameters.TargetContainer",
									"type": "Expression"
								},
								"TargetPrefix": {
									"value": "@pipeline().parameters.JsonPrefix",
									"type": "Expression"
								},
								"TargetFilename": {
									"value": "@pipeline().parameters.TargetFilename",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "xlsx2parquet_pipe3",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "xlsx2json_pipe2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CopyPipeline_xlxs2parquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceContainer": {
									"value": "@pipeline().parameters.SourceContainer",
									"type": "Expression"
								},
								"SourcePrefix": {
									"value": "@pipeline().parameters.SourcePrefix",
									"type": "Expression"
								},
								"SourceFilename": {
									"value": "@pipeline().parameters.SourceFilename",
									"type": "Expression"
								},
								"TargetContainer": {
									"value": "@pipeline().parameters.TargetContainer",
									"type": "Expression"
								},
								"TargetPrefix": {
									"value": "@pipeline().parameters.ParquetPrefix",
									"type": "Expression"
								},
								"TargetFilename": {
									"value": "@pipeline().parameters.TargetFilename",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "xlsx2db",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "xlsx2parquet_pipe3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "xlsx2db",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SourceContainer": {
									"value": "@pipeline().parameters.SourceContainer",
									"type": "Expression"
								},
								"SourcePrefix": {
									"value": "@pipeline().parameters.SourcePrefix",
									"type": "Expression"
								},
								"SourceFilename": {
									"value": "@pipeline().parameters.SourceFilename",
									"type": "Expression"
								},
								"SchemaName": {
									"value": "@pipeline().parameters.DbName",
									"type": "Expression"
								},
								"TableName": {
									"value": "@pipeline().parameters.DbTable",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceContainer": {
						"type": "string",
						"defaultValue": "sources"
					},
					"SourcePrefix": {
						"type": "string",
						"defaultValue": "OriginalFiles"
					},
					"SourceFilename": {
						"type": "string",
						"defaultValue": "ForecastData.xlsx"
					},
					"TargetContainer": {
						"type": "string",
						"defaultValue": "targets"
					},
					"JsonPrefix": {
						"type": "string",
						"defaultValue": "json"
					},
					"CsvPrefix": {
						"type": "string",
						"defaultValue": "csv"
					},
					"ParquetPrefix": {
						"type": "string",
						"defaultValue": "parquet"
					},
					"TargetFilename": {
						"type": "string",
						"defaultValue": "DaForecast"
					},
					"DbName": {
						"type": "string",
						"defaultValue": "TTraining"
					},
					"DbTable": {
						"type": "string",
						"defaultValue": "Forecast"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-18T14:31:50Z"
			},
			"dependsOn": []
		}
	]
}