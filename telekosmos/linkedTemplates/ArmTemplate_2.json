{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "telekosmos"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_xh6')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Prefix": {
						"type": "string"
					},
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Prefix",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TTrainingDimCountry')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Just DimCountry table hardcoded",
				"linkedServiceName": {
					"referenceName": "SqlDatabaseTraining1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "country",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "TTraining",
					"table": "DimCountry"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Thrash')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filepath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "thrash"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_xlsx2csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "xlxs2csv",
				"activities": [
					{
						"name": "Copy_xlsx2csv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "sources/OriginalFiles/ForecastData.xlsx"
							},
							{
								"name": "Destination",
								"value": "targets/csv/Forecast.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_2d7",
								"type": "DatasetReference",
								"parameters": {
									"Filename": {
										"value": "@pipeline().parameters.SourceFilename",
										"type": "Expression"
									},
									"Container": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"Prefix": {
										"value": "@pipeline().parameters.SourcePrefix",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_2d7",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.TargetContainer",
										"type": "Expression"
									},
									"Prefix": {
										"value": "@pipeline().parameters.TargetPrefix",
										"type": "Expression"
									},
									"Filename": {
										"value": "@pipeline().parameters.TargetFilename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceContainer": {
						"type": "string",
						"defaultValue": "sources"
					},
					"TargetContainer": {
						"type": "string",
						"defaultValue": "targets"
					},
					"SourcePrefix": {
						"type": "string",
						"defaultValue": "OriginalFiles"
					},
					"TargetPrefix": {
						"type": "string",
						"defaultValue": "csv"
					},
					"SourceFilename": {
						"type": "string",
						"defaultValue": "ForecastData.xlsx"
					},
					"TargetFilename": {
						"type": "string",
						"defaultValue": "DaForecast"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-18T12:49:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_xlsx2json')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "xlxs2json",
				"activities": [
					{
						"name": "Copy_iho",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "sources/OriginalFiles/ForecastData.xlsx"
							},
							{
								"name": "Destination",
								"value": "targets/json/Forecast.json"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "String"
										},
										"sink": {
											"path": "$['ID']"
										}
									},
									{
										"source": {
											"name": "dt",
											"type": "String"
										},
										"sink": {
											"path": "$['dt']"
										}
									},
									{
										"source": {
											"name": "pressure",
											"type": "Int16"
										},
										"sink": {
											"path": "$['pressure']"
										}
									},
									{
										"source": {
											"name": "humidity",
											"type": "Int16"
										},
										"sink": {
											"path": "$['humidity']"
										}
									},
									{
										"source": {
											"name": "dew_point",
											"type": "Double"
										},
										"sink": {
											"path": "$['dew_point']"
										}
									},
									{
										"source": {
											"name": "wind_speed",
											"type": "Double"
										},
										"sink": {
											"path": "$['wind_speed']"
										}
									},
									{
										"source": {
											"name": "clouds",
											"type": "Int16"
										},
										"sink": {
											"path": "$['clouds']"
										}
									},
									{
										"source": {
											"name": "pop",
											"type": "Double"
										},
										"sink": {
											"path": "$['pop']"
										}
									},
									{
										"source": {
											"name": "uvi",
											"type": "Double"
										},
										"sink": {
											"path": "$['uvi']"
										}
									},
									{
										"source": {
											"name": "temp_max",
											"type": "Double"
										},
										"sink": {
											"path": "$['temp_max']"
										}
									},
									{
										"source": {
											"name": "temp_min",
											"type": "Double"
										},
										"sink": {
											"path": "$['temp_min']"
										}
									},
									{
										"source": {
											"name": "rain_mm",
											"type": "Double"
										},
										"sink": {
											"path": "$['rain_mm']"
										}
									},
									{
										"source": {
											"name": "snow_mm",
											"type": "Double"
										},
										"sink": {
											"path": "$['snow_mm']"
										}
									},
									{
										"source": {
											"name": "prediction_date",
											"type": "String"
										},
										"sink": {
											"path": "$['prediction_date']"
										}
									},
									{
										"source": {
											"name": "forecast_made",
											"type": "String"
										},
										"sink": {
											"path": "$['forecast_made']"
										}
									},
									{
										"source": {
											"name": "SHOP",
											"type": "String"
										},
										"sink": {
											"path": "$['SHOP']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_iho",
								"type": "DatasetReference",
								"parameters": {
									"ContainerSource": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"PrefixSource": {
										"value": "@pipeline().parameters.SourcePrefix",
										"type": "Expression"
									},
									"FilenameSource": {
										"value": "@pipeline().parameters.SourceFilename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_iho",
								"type": "DatasetReference",
								"parameters": {
									"DestContainer": {
										"value": "@pipeline().parameters.TargetContainer",
										"type": "Expression"
									},
									"DestPrefix": {
										"value": "@pipeline().parameters.TargetPrefix",
										"type": "Expression"
									},
									"DestFile": {
										"value": "@pipeline().parameters.TargetFilename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceContainer": {
						"type": "string"
					},
					"SourcePrefix": {
						"type": "string",
						"defaultValue": "OriginalFiles"
					},
					"SourceFilename": {
						"type": "string",
						"defaultValue": "ForecastData.xlsx"
					},
					"TargetContainer": {
						"type": "string",
						"defaultValue": "targets"
					},
					"TargetPrefix": {
						"type": "string"
					},
					"TargetFilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-18T13:58:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_xlxs2parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "xlxs2parquet",
				"activities": [
					{
						"name": "Copy_xlsx2parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "sources/OriginalFiles/ForecastData.xlsx"
							},
							{
								"name": "Destination",
								"value": "targets/parquet/Forecast.parquet"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "String"
										},
										"sink": {
											"name": "ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "dt",
											"type": "String"
										},
										"sink": {
											"name": "dt",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "pressure",
											"type": "String"
										},
										"sink": {
											"name": "pressure",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "humidity",
											"type": "String"
										},
										"sink": {
											"name": "humidity",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "dew_point",
											"type": "String"
										},
										"sink": {
											"name": "dew_point",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "wind_speed",
											"type": "String"
										},
										"sink": {
											"name": "wind_speed",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "clouds",
											"type": "String"
										},
										"sink": {
											"name": "clouds",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "pop",
											"type": "String"
										},
										"sink": {
											"name": "pop",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "uvi",
											"type": "String"
										},
										"sink": {
											"name": "uvi",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "temp_max",
											"type": "String"
										},
										"sink": {
											"name": "temp_max",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "temp_min",
											"type": "String"
										},
										"sink": {
											"name": "temp_min",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "rain_mm",
											"type": "String"
										},
										"sink": {
											"name": "rain_mm",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "snow_mm",
											"type": "String"
										},
										"sink": {
											"name": "snow_mm",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "prediction_date",
											"type": "String"
										},
										"sink": {
											"name": "prediction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "forecast_made",
											"type": "String"
										},
										"sink": {
											"name": "forecast_made",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "SHOP",
											"type": "String"
										},
										"sink": {
											"name": "SHOP",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_s3w",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"Prefix": {
										"value": "@pipeline().parameters.SourcePrefix",
										"type": "Expression"
									},
									"Filename": {
										"value": "@pipeline().parameters.SourceFilename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_s3w",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.TargetContainer",
										"type": "Expression"
									},
									"Prefix": {
										"value": "@pipeline().parameters.TargetPrefix",
										"type": "Expression"
									},
									"Filename": {
										"value": "@pipeline().parameters.TargetFilename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceContainer": {
						"type": "string"
					},
					"SourcePrefix": {
						"type": "string"
					},
					"SourceFilename": {
						"type": "string"
					},
					"TargetContainer": {
						"type": "string"
					},
					"TargetPrefix": {
						"type": "string"
					},
					"TargetFilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-18T14:04:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_jsonrest2parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_rest2parquet",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Destination",
								"value": "targets/parquet/Users.parquet"
							}
						],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['id']"
										},
										"sink": {
											"name": "id",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "$['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "$['username']"
										},
										"sink": {
											"name": "username"
										}
									},
									{
										"source": {
											"path": "$['email']"
										},
										"sink": {
											"name": "email"
										}
									},
									{
										"source": {
											"path": "$['address']['street']"
										},
										"sink": {
											"name": "street"
										}
									},
									{
										"source": {
											"path": "$['address']['suite']"
										},
										"sink": {
											"name": "suite"
										}
									},
									{
										"source": {
											"path": "$['address']['city']"
										},
										"sink": {
											"name": "city"
										}
									},
									{
										"source": {
											"path": "$['address']['zipcode']"
										},
										"sink": {
											"name": "zipcode"
										}
									},
									{
										"source": {
											"path": "$['phone']"
										},
										"sink": {
											"name": "phone"
										}
									},
									{
										"source": {
											"path": "$['website']"
										},
										"sink": {
											"name": "website"
										}
									},
									{
										"source": {
											"path": "$['company']['name']"
										},
										"sink": {
											"name": "company_name"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_7wj",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_7wj",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-18T15:14:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy_xlsx2db_t6k')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "xlsx2db",
				"activities": [
					{
						"name": "Copy_xlsx2db_t6k",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "sources/OriginalFiles/ForecastData.xlsx"
							},
							{
								"name": "Destination",
								"value": ".Azure Blob Storage file"
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"ID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "dt",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dt",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "pressure",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "pressure",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "humidity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "humidity",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "dew_point",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "dew_point",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "wind_speed",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "wind_speed",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "clouds",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "clouds",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "pop",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "pop",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "uvi",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "uvi",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "temp_max",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "temp_max",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "temp_min",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "temp_min",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "rain_mm",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rain_mm",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "snow_mm",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "snow_mm",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "prediction_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "prediction_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "forecast_made",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "forecast_made",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "SHOP",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "shop",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_t6k",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_t6k",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-18T09:54:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Db2Files by format')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy database tables content to files by format",
				"activities": [
					{
						"name": "LookupDbByFormat",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[getTablesAndLocations]",
								"storedProcedureParameters": {
									"the_format": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.format",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlSP",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachRowOfTablesAndLocations",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDbByFormat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDbByFormat').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy Tables to CSVs",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlGenericTable",
											"type": "DatasetReference",
											"parameters": {
												"Schema": "TTraining",
												"Table": {
													"value": "@item().table_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FileN_csv",
											"type": "DatasetReference",
											"parameters": {
												"Container": "targets",
												"Filepath": {
													"value": "@concat(item().dl_location, '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"format": {
						"type": "string",
						"defaultValue": "csv"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-20T09:04:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex 8 - Csv to DB  -and thrash- using SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from csv to thrash",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get File Loc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FileN_csv",
								"type": "DatasetReference",
								"parameters": {
									"Container": "sources",
									"Filepath": {
										"value": "@concat(activity('Get File Loc').output.value[0].dl_location, '.csv')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Thrash",
								"type": "DatasetReference",
								"parameters": {
									"Filepath": {
										"value": "@concat(pipeline().parameters.TableName, '.log')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get File Loc",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[getLocation]",
								"storedProcedureParameters": {
									"the_format": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Format",
											"type": "Expression"
										}
									},
									"the_schema": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Schema",
											"type": "Expression"
										}
									},
									"the_table": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.TableName",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlSP",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy data from csv to db",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get File Loc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FileN_csv",
								"type": "DatasetReference",
								"parameters": {
									"Container": "sources",
									"Filepath": {
										"value": "@concat(activity('Get File Loc').output.value[0].dl_location, '.csv')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.Schema",
										"type": "Expression"
									},
									"Table": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Schema": {
						"type": "string",
						"defaultValue": "TTraining"
					},
					"TableName": {
						"type": "string",
						"defaultValue": "FileTwo"
					},
					"Format": {
						"type": "string",
						"defaultValue": "csv"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-19T16:25:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Thrash')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex14 Login ETL Bad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Login -> staging data lake -> dest table -> move from data lake",
				"activities": [
					{
						"name": "Lookup last date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select coalesce(max([timestamp]), DATEFROMPARTS(1970, 1, 1)) as last_elem_date from [TTraining].[FactLogin]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlGeneric",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Copy new rows to file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup last date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ll.[id], ll.[user], ll.[timestamp]\nfrom [TTraining].[Login] ll\nwhere ll.[timestamp] > ''', activity('Lookup last date').output.firstRow.last_elem_date, '''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlGeneric",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetLoginRawData",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "data flow pipes"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-26T13:45:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ex14 Login to Facts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy new rows to file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT ll.[id], ll.[user], ll.[timestamp], format(ll.[timestamp], 'yyyyMMdd') as dateid, format(ll.[timestamp], 'hhmmss') as timeid,\n  GETDATE() as update_date\nfrom ( \n  select *\n  from [TTraining].[Login] l\n  where l.[timestamp] > (select coalesce(max([timestamp]), DATEFROMPARTS(1970, 1, 1)) from [TTraining].[FactLogin])\n) as ll",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlGeneric",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetLoginRawData",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy login data to facts",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy new rows to file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ParquetLoginRawData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableFactLogin",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup last date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select distinct format(l.[timestamp], 'yyyy') y, format(l.[timestamp], 'MM') m, format(l.[timestamp], 'dd') d\nfrom [TTraining].[Login] l\nwhere l.[timestamp] > (select coalesce(max([timestamp]), DATEFROMPARTS(1970, 1, 1)) from [TTraining].[FactLogin])",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlGeneric",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition new rows",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup last date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy login data to facts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup last date').output.count, 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy login data file to date folder_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ParquetLoginRawData",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ParquetLoginByDate",
											"type": "DatasetReference",
											"parameters": {
												"folder": {
													"value": "@concat('IncrementalLoad/Processed/', activity('Lookup last date').output.firstRow.y, activity('Lookup last date').output.firstRow.m)",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat('File', activity('Lookup last date').output.firstRow.y, activity('Lookup last date').output.firstRow.m, activity('Lookup last date').output.firstRow.d, '.parquet')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete parquet file_copy1",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy login data file to date folder_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ParquetLoginRawData",
											"type": "DatasetReference",
											"parameters": {}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage1",
												"type": "LinkedServiceReference"
											},
											"path": "copyactivity-logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "data flow pipes"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-25T15:18:11Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Move from OriginalFiles to Folder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move the files in OriginalFiles to a folder in this case called Exercise10.",
				"activities": [
					{
						"name": "Get Metadata for file list",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CsvFilesByPattern",
								"type": "DatasetReference",
								"parameters": {
									"file_pattern": "File*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter folders out",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter folders out').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data to param folder",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "FileN_csv",
											"type": "DatasetReference",
											"parameters": {
												"Container": "sources",
												"Filepath": {
													"value": "@concat('OriginalFiles/', item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "FileN_csv",
											"type": "DatasetReference",
											"parameters": {
												"Container": "sources",
												"Filepath": {
													"value": "@concat(pipeline().parameters.target_folder, '/', item().name)",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete original files",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data to param folder",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "FileN_csv",
											"type": "DatasetReference",
											"parameters": {
												"Container": "sources",
												"Filepath": {
													"value": "@concat('OriginalFiles/', item().name)",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureBlobStorage1",
												"type": "LinkedServiceReference"
											}
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Filter folders out",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata for file list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata for file list').output.childItems\n",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type,'File')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"target_folder": {
						"type": "string",
						"defaultValue": "Exercise10"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-20T11:46:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Move parquet files by entity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata for file list",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AllFiles",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@concat(pipeline().parameters.source_folder_prefix, '/', pipeline().parameters.entity)",
										"type": "Expression"
									},
									"file_pattern": {
										"value": "@pipeline().parameters.source_file_pattern",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata for file list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata for file list').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Files to pipeline target folder",
									"description": "Move files to a folder based on entity and date taken from the filename",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ParquetProductFiles",
											"type": "DatasetReference",
											"parameters": {
												"container": "sources",
												"prefix": {
													"value": "@concat(pipeline().parameters.source_folder_prefix, '/', pipeline().parameters.entity)",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ParquetProductFiles",
											"type": "DatasetReference",
											"parameters": {
												"container": "sources",
												"prefix": {
													"value": "@concat(pipeline().parameters.target_folder_prefix, '/', pipeline().parameters.entity, '/', substring(replace(item().name, pipeline().parameters.entity, ''), 0, 6))",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_folder_prefix": {
						"type": "string",
						"defaultValue": "OriginalFiles"
					},
					"target_folder_prefix": {
						"type": "string",
						"defaultValue": "GoogleAnalytics"
					},
					"source_file_pattern": {
						"type": "string",
						"defaultValue": "*.parquet"
					},
					"entity": {
						"type": "string",
						"defaultValue": "Traffic"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-01T07:00:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Move parquet product files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata for file list",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AllFiles",
								"type": "DatasetReference",
								"parameters": {
									"folder": {
										"value": "@pipeline().parameters.source_folder_prefix",
										"type": "Expression"
									},
									"file_pattern": {
										"value": "@pipeline().parameters.source_file_pattern",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEach File",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata for file list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata for file list').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy Files to pipeline target folder",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ParquetProductFiles",
											"type": "DatasetReference",
											"parameters": {
												"container": "sources",
												"prefix": {
													"value": "@pipeline().parameters.source_folder_prefix",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ParquetProductFiles",
											"type": "DatasetReference",
											"parameters": {
												"container": "sources",
												"prefix": {
													"value": "@concat(pipeline().parameters.target_folder_prefix, '/', substring(item().name, 7, 6))",
													"type": "Expression"
												},
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_folder_prefix": {
						"type": "string",
						"defaultValue": "OriginalFiles/Product"
					},
					"target_folder_prefix": {
						"type": "string",
						"defaultValue": "GoogleAnalytics/Product"
					},
					"source_file_pattern": {
						"type": "string",
						"defaultValue": "*.parquet"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-20T13:45:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoveAndRename')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ForecastData.xlsx -> targets/Forecasts/yyyyMM/ForecastYYYYMMdd.parquet",
				"activities": [
					{
						"name": "Get ForecastData Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "SourceDataset_2d7",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "ForecastData.xlsx",
									"Container": "sources",
									"Prefix": "OriginalFiles"
								}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Copy to Forecast -source timestamp",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get ForecastData Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_2d7",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "ForecastData.xlsx",
									"Container": "sources",
									"Prefix": "OriginalFiles"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ForecastByDate",
								"type": "DatasetReference",
								"parameters": {
									"Container": "targets",
									"Prefix": {
										"value": "@concat('Forecasts/', substring(activity('Get ForecastData Metadata').output.lastModified, 0, 4), '/', substring(activity('Get ForecastData Metadata').output.lastModified, 5, 2))",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat('DaForecast', substring(activity('Get ForecastData Metadata').output.lastModified, 0, 4), substring(activity('Get ForecastData Metadata').output.lastModified, 5, 2), substring(activity('Get ForecastData Metadata').output.lastModified, 8, 2), '.parquet')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-19T16:23:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tables to files by schemas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dump all tables in schemas to files",
				"activities": [
					{
						"name": "Lookup tables by schemas",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT TABLE_SCHEMA, TABLE_NAME\nFROM INFORMATION_SCHEMA.TABLES i_schema\nwhere i_schema.TABLE_SCHEMA = 'TTraining' or i_schema.TABLE_SCHEMA = 'SalesLT'\n  and i_schema.TABLE_TYPE = 'BASE TABLE';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlGeneric",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table in schemas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup tables by schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup tables by schemas').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy table data to parquet",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlGenericTable",
											"type": "DatasetReference",
											"parameters": {
												"Schema": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"Table": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ParquetBackupFiles",
											"type": "DatasetReference",
											"parameters": {
												"prefix_dbschema": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"prefix_dbtable": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-20T09:55:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/xlsx2db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_xh6",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "sources/OriginalFiles/ForecastData.xlsx"
							},
							{
								"name": "Destination",
								"value": "."
							}
						],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"ID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									}
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ID",
											"type": "String"
										},
										"sink": {
											"name": "ID"
										}
									},
									{
										"source": {
											"name": "dt",
											"type": "String"
										},
										"sink": {
											"name": "dt"
										}
									},
									{
										"source": {
											"name": "pressure",
											"type": "String"
										},
										"sink": {
											"name": "pressure"
										}
									},
									{
										"source": {
											"name": "humidity",
											"type": "String"
										},
										"sink": {
											"name": "humidity"
										}
									},
									{
										"source": {
											"name": "dew_point",
											"type": "String"
										},
										"sink": {
											"name": "dew_point"
										}
									},
									{
										"source": {
											"name": "wind_speed",
											"type": "String"
										},
										"sink": {
											"name": "wind_speed"
										}
									},
									{
										"source": {
											"name": "clouds",
											"type": "String"
										},
										"sink": {
											"name": "clouds"
										}
									},
									{
										"source": {
											"name": "pop",
											"type": "String"
										},
										"sink": {
											"name": "pop"
										}
									},
									{
										"source": {
											"name": "uvi",
											"type": "String"
										},
										"sink": {
											"name": "uvi"
										}
									},
									{
										"source": {
											"name": "temp_max",
											"type": "String"
										},
										"sink": {
											"name": "temp_max"
										}
									},
									{
										"source": {
											"name": "temp_min",
											"type": "String"
										},
										"sink": {
											"name": "temp_min"
										}
									},
									{
										"source": {
											"name": "rain_mm",
											"type": "String"
										},
										"sink": {
											"name": "rain_mm"
										}
									},
									{
										"source": {
											"name": "snow_mm",
											"type": "String"
										},
										"sink": {
											"name": "snow_mm"
										}
									},
									{
										"source": {
											"name": "prediction_date",
											"type": "String"
										},
										"sink": {
											"name": "prediction_date"
										}
									},
									{
										"source": {
											"name": "forecast_made",
											"type": "String"
										},
										"sink": {
											"name": "forecast_made"
										}
									},
									{
										"source": {
											"name": "SHOP",
											"type": "String"
										},
										"sink": {
											"name": "shop"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_xh6",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.SourceContainer",
										"type": "Expression"
									},
									"Prefix": {
										"value": "@pipeline().parameters.SourcePrefix",
										"type": "Expression"
									},
									"Filename": {
										"value": "@pipeline().parameters.SourceFilename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationTrainingDB",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": {
										"value": "@pipeline().parameters.SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceContainer": {
						"type": "string"
					},
					"SourcePrefix": {
						"type": "string",
						"defaultValue": "OriginalFiles"
					},
					"SourceFilename": {
						"type": "string",
						"defaultValue": "ForecastData.xlsx"
					},
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-18T14:31:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_xh6')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfDimTables')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableAddress",
								"type": "DatasetReference"
							},
							"name": "sourceSalesAddres"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sinkDimState"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sinkDimCity"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sinkDimCountry"
						}
					],
					"transformations": [
						{
							"name": "aggCountry"
						},
						{
							"name": "aggCity"
						},
						{
							"name": "aggState"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceSalesAddres",
						"sourceSalesAddres aggregate(groupBy(CountryRegion),",
						"     counter = count()) ~> aggCountry",
						"sourceSalesAddres aggregate(groupBy(City),",
						"     counter = count()) ~> aggCity",
						"sourceSalesAddres aggregate(groupBy(StateProvince),",
						"     counter = count()) ~> aggState",
						"aggState sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          state = StateProvince",
						"     )) ~> sinkDimState",
						"aggCity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          city = City",
						"     )) ~> sinkDimCity",
						"aggCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          country = CountryRegion",
						"     )) ~> sinkDimCountry"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfFillDimCity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dim table Incremental load",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableAddress",
								"type": "DatasetReference"
							},
							"name": "sourceAddress"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sourceDimCity"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlGenericTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "leftJoinOnCity"
						},
						{
							"name": "filterCityNULL"
						},
						{
							"name": "aggCity"
						},
						{
							"name": "selectJustCity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     schema as string",
						"}",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceAddress",
						"source(output(",
						"          id as integer,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceDimCity",
						"sourceAddress, sourceDimCity join(sourceAddress@City == sourceDimCity@city,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> leftJoinOnCity",
						"leftJoinOnCity filter(isNull(sourceDimCity@city)) ~> filterCityNULL",
						"filterCityNULL aggregate(groupBy(sourceAddress@City),",
						"     counter = count()) ~> aggCity",
						"aggCity select(mapColumn(",
						"          City",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJustCity",
						"selectJustCity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          city = City",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}